What happens when you initalize a repositiory? Why do you need it?

* A git repository is where all of your commits are saved. When you 
* run the code git init the repositiory is created but saved in a 
* hidden file. To see this file (or any hidden file) run the command
* ls -a. 

How is the staging area different from the working directory and repository? What value do you think it offers?

* The staging area is where you choose what files to commit. You can 
* add files that you want to add. Once these files and a comment is 
* added the commit will be saved to the repository. 

How can you use the staging area to make sure you have one commit per logical change?

* You can use the command "git status" to first check and see what is 
* in the staging area. Next use "git diff" to see what is in the 
* working directory. Finally "git --staged" will show what is in the
* staging area and what has been changed since the last commit. All
* these steps should be taken before making a commit.

What are some situations when branches would be helpul in keeping your history organizd? How would branches help?

* This answer is easy so instead I'll just write the commands. "git 
* branch" will tell you the current branch you are on. "git branch 
* 'argument'" will create a new branch with the name 'argument.'
* "git checkout 'branch name'" will make sure that you are using 
* the branch that you want. The main branch of every program is called
* master. DO NOT FORGET!!


